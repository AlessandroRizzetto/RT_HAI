<?xml version="1.0"?>

<pipeline ssi-v="1">

	<register>
		<load name="graphic" />
		<load name="ioput" />
		<load name="signal" />
		<load name="python310" />
		<load name="opensmile" />
	</register>

	<include path=".\vad_filter.pipeline"/>

	<!-- # Preprocessing with OpenSMILE
	
	Here we use the OpenSMILE library to extract features from the audio signal.
	We extract the following features:
	- Pitch: `PythonFeature` (filter)
	- Root-mean-square energy: `OSEnergy` (feature)
	- Loudness: `PythonFeature` (feature)
	- Jitter: `PythonFeature` (feature)
	- Shimmer: `PythonFeature` (feature)
	- Alpha Ratio: `PythonFeature` (feature)
	- Hammarberg Index: `PythonFeature` (feature)
	- Spectral Flux: `PythonFeature` (feature)
	- Spectral Slope 0-500: `PythonFeature` (feature)
	- MFCC: `OSMfccChain` (feature, optional if `features:mffc=true`)
	-->
	<transformer create="OSEnergy:energy" type="0">
		<input pin="vad-audio" frame="1s" delta="0.5s"/>
		<output pin="energy"/>
	</transformer>
	<transformer create="PythonFeature:loudness" script="opensmile_manager" syspath="..\scripts" optsstr="feature=loudness_sma3_amean">
		<input pin="audio-down" frame="1s" delta="0.5s"/>
		<output channel="loudness" pin="loudness"/>
	</transformer>
	<transformer create="PythonFeature:pitch" script="opensmile_manager" syspath="..\scripts" optsstr="feature=F0semitoneFrom27.5Hz_sma3nz_amean">
		<input pin="audio-down" frame="1s" delta="0.5s"/>
		<output channel="pitch" pin="pitch"/>
	</transformer>
	<transformer create="PythonFeature:jitter" script="opensmile_manager" syspath="..\scripts" optsstr="feature=jitterLocal_sma3nz_amean">
		<input pin="audio-down" frame="1s" delta="0.5s"/>
		<output channel="jitter" pin="jitter"/>
	</transformer>
	<transformer create="PythonFeature:shimmer" script="opensmile_manager" syspath="..\scripts" optsstr="feature=shimmerLocaldB_sma3nz_amean">
		<input pin="audio-down" frame="1s" delta="0.5s"/>
		<output channel="shimmer" pin="shimmer"/>
	</transformer>
	<transformer create="PythonFeature:alpha-ratio" script="opensmile_manager" syspath="..\scripts" optsstr="feature=alphaRatioV_sma3nz_amean">
		<input pin="audio-down" frame="1s" delta="0.5s"/>
		<output channel="alpha-ratio" pin="alpha-ratio"/>
	</transformer>
	<transformer create="PythonFeature:hammarberg-index" script="opensmile_manager" syspath="..\scripts" optsstr="feature=hammarbergIndexV_sma3nz_amean">
		<input pin="audio-down" frame="1s" delta="0.5s"/>
		<output channel="hammarberg-index" pin="hammarberg-index"/>
	</transformer>
	<transformer create="PythonFeature:spectral-flux" script="opensmile_manager" syspath="..\scripts" optsstr="feature=spectralFluxV_sma3nz_amean">
		<input pin="audio-down" frame="1s" delta="0.5s"/>
		<output channel="spectral-flux" pin="spectral-flux"/>
	</transformer>
	<transformer create="PythonFeature:spectral-slope" script="opensmile_manager" syspath="..\scripts" optsstr="feature=slopeV0-500_sma3nz_amean">
		<input pin="audio-down" frame="1s" delta="0.5s"/>
		<output channel="spectral-slope" pin="spectral-slope"/>
	</transformer>
	<gate open="$(features:mffc)">
		<transformer create="OSMfccChain:mfcc" option="..\options\mfcc">
			<input pin="vad-audio" frame="0.01s" delta="0.02s"/>
			<output pin="mfcc"/>
		</transformer>
	</gate>

	<gate open="$(output:visualization:debug)">
		<object create="EventMonitor:monitor" title="Events">
			<listen address="vad@audio" span="10000"/>
		</object>
	</gate>
	<!---->

	<transformer create="PythonFeature:loudness-d" script="first_derivative" syspath="..\scripts">
		<input pin="loudness" frame="1s" delta="0.5s"/>
		<output channel="loudness-d" pin="loudness-d"/>
	</transformer>
	<transformer create="PythonFeature:pitch-d" script="first_derivative" syspath="..\scripts">
		<input pin="pitch" frame="1s" delta="0.5s"/>
		<output channel="pitch-d" pin="pitch-d"/>
	</transformer>

	<!-- # Playback and Visualization
	
	Then we play back the audio signal and visualize its informations.
	
	-->
	<gate close="$(audio:live)">
		<consumer create="AudioPlayer:audio" option="..\options\aplayer">
			<input pin="audio" frame="0.1s" />
		</consumer>
	</gate>
	<gate close="$(output:visualization:python)">
		<consumer create="SignalPainter:plot-audio" title="AUDIO" size="10" type="2">
			<input pin="audio" frame="0.3s" />
		</consumer>
		<consumer create="SignalPainter:plot-f-h-loudness" title="LOUDNESS" type="5">
			<input pin="loudness" frame="1s" delta="0.5s" />
		</consumer>
		<consumer create="SignalPainter:plot-f-loudness-d" title="LOUDNESS DERIVATIVE" type="4">
			<input pin="loudness-d" frame="1s" delta="0.5s" />
		</consumer>
		<consumer create="SignalPainter:plot-f-loudness-dh" title="LOUDNESS DERIVATIVE HISTORY" size="30.0">
			<input pin="loudness-d" frame="1s" delta="0.5s" />
		</consumer>
		<consumer create="SignalPainter:plot-f-h-pitch" title="PITCH" type="5">
			<input pin="pitch" frame="1s" delta="0.5s" />
		</consumer>
		<consumer create="SignalPainter:plot-f-pitch-d" title="PITCH DERIVATIVE" type="4">
			<input pin="pitch-d" frame="1s" delta="0.5s" />
		</consumer>
		<consumer create="SignalPainter:plot-f-pitch-dh" title="PITCH DERIVATIVE HISTORY" size="30.0">
			<input pin="pitch-d" frame="1s" delta="0.5s" />
		</consumer>
		<consumer create="SignalPainter:plot-f-h-energy" size="10" title="ENERGY" type="5">
			<input pin="energy" frame="1s" delta="0.5s" />
		</consumer>
		<consumer create="SignalPainter:plot-f-h-jitter" title="JITTER" type="5">
			<input pin="jitter" frame="1s" delta="0.5s" />
		</consumer>
		<consumer create="SignalPainter:plot-f-h-shimmer" title="SHIMMER" type="5">
			<input pin="shimmer" frame="1s" delta="0.5s" />
		</consumer>
		<consumer create="SignalPainter:plot-f-h-alpha-ratio" size="10" title="ALPHA RATIO" type="4">
			<input pin="alpha-ratio" frame="1s" delta="0.5s" />
		</consumer>
		<consumer create="SignalPainter:plot-f-h-hammarberg-index" size="10" title="HAMMARBERG INDEX" type="4">
			<input pin="hammarberg-index" frame="1s" delta="0.5s" />
		</consumer>
		<consumer create="SignalPainter:plot-f-h-spectral-slope" size="10" title="SPECTRAL SLOPE" type="4">
			<input pin="spectral-slope" frame="1s" delta="0.5s" />
		</consumer>
		<consumer create="SignalPainter:plot-f-h-spectral-flux" size="10" title="SPECTRAL FLUX" type="5">
			<input pin="spectral-flux" frame="1s" delta="0.5s" />
		</consumer>
		<consumer create="SignalPainter:plot-vad" title="VAD" size="10" type="2">
			<input pin="vad-audio" frame="0.1s" />
		</consumer>
		<gate open="$(features:mffc)">
			<consumer create="SignalPainter:plot-mffc" size="10" title="MFCC" type="1">
				<input pin="mfcc" frame="0.03s" />
			</consumer>
		</gate>

		<gate open="$(output:visualization:debug)">
			<gate close="$(features:mffc)">
				<object create="Decorator" icon="true" title="Pipeline">
					<area pos="0,0,400,300">plot-audio</area>
					<area pos="0,300,600,600" nv="2" nh="5">plot-f-*</area>
					<area pos="400,0,400,300">plot-vad</area>
					<area pos="900,0,600,800">monitor</area>
				</object>
			</gate>
			<gate open="$(features:mffc)">
				<object create="Decorator" icon="true" title="Pipeline">
					<area pos="0,0,400,300">plot-audio</area>
					<area pos="0,300,600,600" nv="2" nh="5">plot-f-*</area>
					<area pos="400,0,400,300">plot-vad</area>
					<area pos="600,300,400,300">plot-mffc</area>
					<area pos="1100,0,400,800">monitor</area>
				</object>
			</gate>
		</gate>
		<gate close="$(output:visualization:debug)">
			<object create="Decorator" icon="true" title="Pipeline">
				<area pos="50,50,150,350">plot-f-loudness-d</area>
				<area pos="250,50,600,350">plot-f-loudness-dh</area>
				<area pos="50,450,150,350">plot-f-pitch-d</area>
				<area pos="250,450,600,350">plot-f-pitch-dh</area>
				<area pos="1000,0,400,150">plot-audio</area>
				<area pos="1000,150,400,150">plot-vad</area>
				<area pos="900,300,600,600" nv="2" nh="5">plot-f-h-*</area>
			</object>
		</gate>
	</gate>
	<gate open="$(output:visualization:python)">
		<consumer create="PythonConsumer:features_sender" script="features_sender" syspath="..\scripts">
			<input pin="loudness" frame="1s" delta="0.5s" />
			<xinput size="9">
				<input pin="loudness-d" />
				<input pin="pitch" />
				<input pin="pitch-d" />
				<input pin="energy" />
				<input pin="jitter" />
				<input pin="shimmer" />
				<input pin="alpha-ratio" />
				<input pin="hammarberg-index" />
				<input pin="spectral-flux" />
				<input pin="spectral-slope" />
			</xinput>
		</consumer>
	</gate>
	<!---->

	<!-- # Storage of features
	
	Finally, if this isn't a calibration (specified by calibration:user) and if specified by the config variable `output:file:save` (eventually specifying also if you want a new file with `output:file:new`), the features are stored in a file (path specified in `output:file:path`).
	The config variable `user:class` is used to specify the class/identifier of the user.
	All values of features with the lower framerate are saved. Instead, features with higher framerate are first filtered with savgolf_filter and then averaged to obtain values in correspondence of the ones just mentioned.
	
	-->
	<gate close="$(calibration:user)">
		<gate open="$(output:file:save)">
			<consumer create="PythonConsumer:file_storage" script="file_storage" syspath="..\scripts" optsstr="user_class=$(user:class);file_path=$(output:file:path);new_file=$(output:file:new)">
				<input pin="loudness" frame="1s" delta="0.5s" />
				<xinput size="9">
					<input pin="loudness-d" />
					<input pin="pitch" />
					<input pin="pitch-d" />
					<input pin="energy" />
					<input pin="jitter" />
					<input pin="shimmer" />
					<input pin="alpha-ratio" />
					<input pin="hammarberg-index" />
					<input pin="spectral-flux" />
					<input pin="spectral-slope" />
				</xinput>
			</consumer>
		</gate>
	</gate>
	<!---->

	<!-- # User Calibration
	
	If specified by the config variable `calibration:user` (eventually specifying also if you want a new file with `calibration:user:file:new`), we can create a calibration for a user.
	In fact we can store the means of the features (filtered with savgolf_filter) in a file (path specified in `calibration:user:file:path`).
	As before, the config variable `user:class` is used to specify the class/identifier of the user.

	-->
	<gate open="$(calibration:user)">
		<consumer create="PythonConsumer:file_storage" script="file_storage" syspath="..\scripts" optsstr="user_class=$(user:class);mean=true;file_path=$(calibration:user:file:path);new_file=$(calibration:user:file:new)">
			<input pin="loudness" frame="1s" delta="0.15s" />
			<xinput size="7">
				<input pin="pitch" />
				<input pin="energy" />
				<input pin="jitter" />
				<input pin="shimmer" />
				<input pin="alpha-ratio" />
				<input pin="hammarberg-index" />
				<input pin="spectral-flux" />
				<input pin="spectral-slope" />
			</xinput>
		</consumer>
	</gate>
	<!---->

</pipeline>