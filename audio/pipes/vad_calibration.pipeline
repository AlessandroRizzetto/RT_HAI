<?xml version="1.0"?>

<pipeline ssi-v="1">

	<register>
		<load name="event" />
		<load name="graphic" />
		<load name="ioput"/>
	</register>

	<!-- server
	
	We set up a server here, it will send a sync message on port 1111 to all 
	machines in the network.
	
	-->
	<framework sync="true" slisten="false" sport="1111" sdialog="true"/>
	<!---->

	<!-- socket receiver 
	
	Reads from a socket port and feeds the received signal into the pipeline.
	Receive treshold changes
	
	-->
	<object create="SocketEventReader" url="udp://localhost:3333" address="calibration@vad" />
	<!---->

	<!-- environment setup
	
	Import vad_filter and create a plot to see the original audio on the left and the VADed audio on the right.

	-->
	<include path=".\vad_filter.pipeline"/>

	<consumer create="SignalPainter:plot-audio" title="AUDIO" size="10" type="2">
		<input pin="audio" frame="0.3s" />
	</consumer>
	<consumer create="SignalPainter:plot-vad" title="VAD" size="10" type="2">
		<input pin="vad-audio" frame="0.1s" />
	</consumer>


	<gate open="$(calibration:event:monitor)">
		<object create="EventMonitor:monitor" title="Events">
			<listen address="vad-tresh,calibration@audio,vad" span="10000"/>
		</object>
	</gate>

	<gate open="$(calibration:event:monitor)">
		<object create="Decorator" icon="true" title="Vad Calibration">
			<area pos="0,0,400,300">plot-audio</area>
			<area pos="400,0,400,300">plot-vad</area>
			<area pos="1100,0,400,800">monitor</area>
		</object>
	</gate>
	<gate close="$(calibration:event:monitor)">
		<object create="Decorator" icon="true" title="Vad Calibration">
			<area pos="0,0,400,300">plot-audio</area>
			<area pos="400,0,400,300">plot-vad</area>
		</object>
	</gate>
	<!---->
</pipeline>